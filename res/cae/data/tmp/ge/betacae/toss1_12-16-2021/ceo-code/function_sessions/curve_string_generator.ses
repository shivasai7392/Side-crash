//#!python
# PYTHON script
import meta
import difflib
from meta import *

def main():

	# Generating list of numbers to search against
	number_characters = []
	for i in range(48,57):
		number_characters.append(chr(i))
	
	letter_characters = []
	# Generating list of upper case letters to search against
	for i in range(65,90):
		letter_characters.append(chr(i))
	# Adding lower case numbers to letter search list
	for i in range(97,122):
		letter_characters.append(chr(i))

	# Import target window
	page_id = 0
	window_name = str(utils.MetaGetVariable('target_window'))
	win = windows.Window(window_name, page_id)

	# STRIP OFF QUOTATIONS OR ANY OTHER CORRUPTING CHARACTERS
	# STRIPPED CHARACTERS : [ " ' $ { } ]
	stripped_characters = [chr(34) ,chr(39), chr(36), chr(123),chr(125)]

	# Import target node list
	try:
		target_variable = str(utils.MetaGetVariable('target_variable'))
		for s in stripped_characters:
			target_variable = target_variable.strip(s)
		curve_user_input = str(utils.MetaGetVariable(target_variable))
		print("---")
		print("")
		print("CURVE USER INPUT : "+curve_user_input+" | FROM VARIABLE : "+target_variable+ " | SOURCE WINDOW : "+window_name)
	except:
		target_variable = str(utils.MetaGetVariable('target_variable'))
		curve_user_input = str(utils.MetaGetVariable('target_curves'))
		print("---")
		print("")
		print("TRIED AND FAILED TO UTILIZE : "+target_variable)
		print("FALLBACK VARIABLE PULLED : target_curves")


	# SEARCHS DELIMETERS FIRST TO LAST AND BREAKS WHEN ONE IS FOUND
	# DELIMETERS SEARCH : [ , / \ : ; ]
	delimeters = [chr(44) ,chr(47) ,chr(92) ,chr(58) ,chr(59)]
	for d in delimeters:
		if (curve_user_input.find(d) != -1):
			target_delimeter = d
			break

	# Split user input based on delimeter used
	target_curves = []
	try:
		target_curves = curve_user_input.split(target_delimeter)
	except:
		target_curves.append(curve_user_input)

	#Determine what the user input... ID's? full names? partial names?
	number_flag = 0
	letter_flag = 0
	for thing in target_curves:
		# Determine the type of list the user made
		for number in number_characters:
			if number in thing:
				number_flag = 1
				continue
		for letter in letter_characters:
			if letter in thing:
				letter_flag = 1
				continue
		location = target_curves.index(thing)
		for s in stripped_characters:
			target_curves[location] = target_curves[location].strip(s)

	#If the target_curves are numbers then we can use (vertical tab) or (space) as delimeters
	if (number_flag == 1) and (letter_flag == 0):
		delimeters.append(chr(11))
		delimeters.append(chr(32))
		for d in delimeters:
			if (curve_user_input.find(d) != -1):
				target_delimeter = d
				break
		# Split user input based on delimeter used
		target_curves = []
		try:
			target_curves = curve_user_input.split(target_delimeter)
		except:
			target_curves.append(curve_user_input)

	all_curves = win.get_curves('all')

	search_curves = []
	search_curve_db = []

	full_name_flag = 0
	fnf = 0
	number_name_flag = 0
	nnf = 0
	partial_name_flag = 0
	pnf = 0
	all_curve_id = []
	all_curve_names = []
	for c in all_curves:
		all_curve_id.append(str(c.id))
		entity_id = str(c.id) # Id of entity
		all_curve_names.append(c.name)
		entity_name = c.name # Name of entity
		if (entity_name in target_curves) and (letter_flag == 1):
			try:
				is_it_real = target_curves.index(entity_name)
				search_curves.append(str(entity_id))
				search_curve_db.append(c)
				full_name_flag = 1
				number_name_flag = 0
				partial_name_flag = 0
				fnf = 1
				continue
			except:
				false_positive = 1
		if (entity_id in target_curves) and (number_flag == 1):
			try:
				is_it_real = target_curves.index(entity_id)
				if int(target_curves[is_it_real]) == int(entity_id):
					search_curves.append(target_curves[is_it_real])
					search_curve_db.append(c)
					number_name_flag = 1
					full_name_flag = 0
					partial_name_flag = 0
					nnf = 1
					continue
			except:
				false_positive = 1
		for target in target_curves:
			if (target in entity_name) and (letter_flag == 1):
				search_curves.append(str(entity_id))
				search_curve_db.append(c)
				partial_name_flag = 1
				full_name_flag = 0
				number_name_flag = 0
				pnf = 1
				continue
		

	if len(search_curves) == 0:
		print()
		print("Curves not found in user input window!")

		for target in target_curves:
			print('FAILED TO USE TARGET |'+target+'|')
			thing_string = ''
			closest_string = difflib.get_close_matches(target,all_curve_names)
			for thing in closest_string:
				if len(thing_string) == 0:
					thing_string = "|" + str(thing)
				else:
					thing_string = thing_string + "|" + str(thing)
			thing_string = thing_string + '|'
			print()
			print('CLOSEST CURVE NAME MATCHES : '+thing_string)
			thing_string = ''
			closest_id = difflib.get_close_matches(target,all_curve_id)
			for thing in closest_id:
				if len(thing_string) == 0:
					thing_string = "|" + str(thing)
				else:
					thing_string = thing_string + "|" + str(thing)
			thing_string = thing_string + '|'
			print()
			print('CLOSEST CURVE ID MATCHES : '+thing_string)
			print()

	else:
		print(str(len(search_curves))+" CURVES IDENTIFIED FROM USER INPUT!")
		if fnf == 1:
			print('USED FULL CURVE NAMES TO IDENTIFY CURVES!')
		if nnf == 1:
			print('USED CURVE ID TO IDENTIFY CURVES!')
		if pnf == 1:
			print('USED PARTIAL CURVE NAMES TO IDENTIFY CURVES!')
		

	# Curve string is always delimeted by ,
	curve_string_delimeter = chr(44)

	# Initialize output string
	output_curve_string = ''
	python_index = len(search_curve_db)
	for c in search_curve_db:
		if search_curve_db.index(c) == (python_index-1):
			output_curve_string = output_curve_string + str(c.id)
		else:
			output_curve_string = output_curve_string + str(c.id) + curve_string_delimeter

	#Pass the output string to meta
	utils.MetaSetVariable('target_curves', output_curve_string)
	print("OUTPUT CURVE STRING : "+output_curve_string)

if __name__ == '__main__':
	main()
//#!EOF