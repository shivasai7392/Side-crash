$---------------------------------------
$
$ Session file to look at the failure value of welds in the visible space
$
$---------------------------------------
$-- Example input variables
//#!python
# PYTHON script

import os
import string
import re
import subprocess as sub
import datetime
import meta
from meta import *

def main():

	print("")
	print("--------------")
	print("---HDMA VISIBLE SPOTWELD ANALYSIS---")
	logtime = datetime.datetime.now().strftime("%Y-%m-%d-%H-%M-%S")
	print("START TIME : "+str(logtime))

	spotweld_list = []
	spotweld_cluster_list = []
	spotweld_failure_list = []
	element_list = []
	identified_elements = []


	start_command = []
	start_command.append("xyplot create ${target_window}")
	start_command.append("xyplot plotdeactive ${target_window} all")
	start_command.append("xyplot plotactive ${target_window} 0")
	start_command.append("xyplot curve function datum ${target_window} horizontal ${threshold} on on")
	start_command.append("model active none")
	start_command.append("model active ${target_model}")

	window_command = []
	window_command.append("window active ${source_window}")
	window_command.append("model active none")
	window_command.append("model active ${target_model}")

	twodwindow_command = []
	twodwindow_command.append("window active ${target_window}")
	twodwindow_command.append("model active none")
	twodwindow_command.append("model active ${target_model}")

	spotweld_identifier='Spotweld ID:'

	threshold= float(guitk.UserInput('What is the lowest failure value you want labelled?', '0.8'))
	utils.MetaSetVariable('threshold', str(threshold))

	model_id = int(guitk.UserInput('What is your target model?', '0'))
	m = models.Model(model_id)
	utils.MetaSetVariable('target_model', str(model_id))

	path = os.path.dirname(m.name)
	path.replace('//','/')
	utils.MetaSetVariable('source_path', path)

	window_name = str(guitk.UserInput('What is your source 3D window name?', 'MetaPost'))
	w = windows.Window(window_name, 0)
	utils.MetaSetVariable('source_window', window_name)

	output_window = str(guitk.UserInput('What is your desired output 2D window name?', 'spotweld_output'))
	utils.MetaSetVariable('target_window', output_window)

	response = int(guitk.UserQuestion("Purge annotations?"))
	if response == 1:
		command = "model active ${target_model}"
		utils.MetaCommand(command)
		command = "annotation del all"
		utils.MetaCommand(command)

	response = int(guitk.UserQuestion("Purge output 2D window?"))
	if response == 1:
		command = "window delete ${target_window}"
		utils.MetaCommand(command)

	elements = m.get_elements('visible', window =w, element_type = constants.SOLID )

	for command in start_command:
		utils.MetaCommand(command)

	for e in elements:

		if str(e.id) not in identified_elements:

			command_line = 'grep "'
			command_line = command_line + spotweld_identifier
			command_line = command_line + '" '
			command_line = command_line + os.path.join(path,'d3hsp')
			whatever_d3hsp = 'd3hsp'
			command_line = command_line + ' -A 3 | grep '
			command_line = command_line + str(e.id)
			element_list.append(e.id)
			command_line = command_line + ' -B 2 | grep "'
			command_line = command_line + spotweld_identifier
			command_line = command_line + '"'
			cmd_string = "".join(command_line)
			cmd_data=sub.Popen(cmd_string, shell=True, stdout=sub.PIPE, stderr=sub.PIPE)
			(out,err)=cmd_data.communicate()
			spotweld_id = re.findall(r'\d+',str(out))

			try:
				trial = spotweld_id[0]
			except:
				command_line = 'grep "'
				command_line = command_line + spotweld_identifier
				command_line = command_line + '" '
				command_line = command_line + os.path.join(path,'decomp_d3hsp')
				whatever_d3hsp = 'decomp_d3hsp'
				command_line = command_line + ' -A 3 | grep '
				command_line = command_line + str(e.id)
				element_list.append(e.id)
				command_line = command_line + ' -B 2 | grep "'
				command_line = command_line + spotweld_identifier
				command_line = command_line + '"'
				cmd_string = "".join(command_line)
				cmd_data=sub.Popen(cmd_string, shell=True, stdout=sub.PIPE, stderr=sub.PIPE)
				(out,err)=cmd_data.communicate()
				spotweld_id = re.findall(r'\d+',str(out))
				
				try:
					trial = spotweld_id[0]
				except:
					continue
			
			if trial not in spotweld_list:
				spotweld_list.append(trial)
				command_line = 'grep "'
				command_line = command_line + spotweld_identifier
				command_line = command_line + '" '
				command_line = command_line + os.path.join(path,whatever_d3hsp)
				command_line = command_line + ' -A 3 | grep '
				command_line = command_line + str(e.id)
				cmd_string = "".join(command_line)
				cmd_data=sub.Popen(cmd_string, shell=True, stdout=sub.PIPE, stderr=sub.PIPE)
				(out,err)=cmd_data.communicate()

				spotweld_elements = re.findall(r'\d+',str(out))
				spotweld_cluster_list.append(spotweld_elements)

				meta_command = 'group create elements spotweld_cluster_'
				meta_command = meta_command + str(spotweld_id[0])
				meta_command = meta_command + ' '

				for element in spotweld_elements:
					identified_elements.append(element)
					if spotweld_elements.index(element) < (len(spotweld_elements) -1):
						meta_command = meta_command + str(element) + ','
					else:
						meta_command = meta_command + str(element)
				utils.MetaCommand(meta_command)

				for command in twodwindow_command:
					utils.MetaCommand(command)

				meta_command = 'xyplot read lsdyna ${target_window} "${source_path}/binout*" swforc-SpotweldAssmy '
				meta_command = meta_command + str(spotweld_id[0])
				meta_command = meta_command + ' failure_(f)'
				utils.MetaCommand(meta_command)

				meta_command = 'options var add tmp_max `w[${target_window}]c${LAST_CURVE_ID}.y[y=max]`'
				utils.MetaCommand(meta_command)

				meta_command = 'options var add tmp_max_t `w[${target_window}]c${LAST_CURVE_ID}.x[y=max]`'
				utils.MetaCommand(meta_command)

				failure_value = float(utils.MetaGetVariable('tmp_max'))
				failure_value = round(failure_value,2)
				failure_value = str(failure_value)

				if float(failure_value) > threshold:

					for command in window_command:
						utils.MetaCommand(command)

					failure_time = float(utils.MetaGetVariable('tmp_max_t'))
					failure_time = round(failure_time,3)
					failure_time = str(failure_time)

					meta_command = 'annotation add ongroups spotweld_cluster_'
					meta_command = meta_command + str(spotweld_id[0])
					meta_command = meta_command + ' "'
					meta_command = meta_command + failure_value
					meta_command = meta_command + ' @ '
					meta_command = meta_command + failure_time
					meta_command = meta_command + '" none'
					utils.MetaCommand(meta_command)
	
	logtime = datetime.datetime.now().strftime("%Y-%m-%d-%H-%M-%S")
	print("END TIME : "+str(logtime))
	print("PROCESSED WELDS : "+str(len(spotweld_list)))

if __name__ == '__main__':
	main()
//#!EOF

window active ${source_window}
annotation explode all center 10
annotation extparam all shape off
annotation text all format auto